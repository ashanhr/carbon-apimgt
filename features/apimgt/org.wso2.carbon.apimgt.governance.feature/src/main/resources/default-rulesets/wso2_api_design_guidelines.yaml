# Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.
#
# This software is the property of WSO2 LLC. and its suppliers, if any.
# Dissemination of any information or reproduction of any material contained
# herein in any form is strictly forbidden, unless permitted by WSO2 expressly.
# You may not alter or remove any copyright or other notice from copies of this content.

name: WSO2 API Design Guidelines
description: >-
  A guide detailing best practices for creating robust, scalable, and secure
  APIs, ensuring alignment with industry standards for optimal design.
ruleCategory: SPECTRAL
ruleType: API_DEFINITION
artifactType: REST_API
documentationLink: "https://wso2.com/choreo/docs/api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/"
provider: WSO2
rulesetContent:
  rules:
    required-id:
      description: "API must have an id."
      message: "Missing or empty `data.id` field."
      severity: error
      given: "$.data.id"
      then:
        function: truthy

    required-name:
      description: "API must have a name."
      message: "Missing or empty `data.name` field."
      severity: error
      given: "$.data.name"
      then:
        function: truthy

    required-description:
      description: "API should have a meaningful description."
      message: "Missing or empty `data.description` field."
      severity: warn
      given: "$.data.description"
      then:
        function: truthy

    required-context:
      description: "API must define a context."
      message: "Missing or empty `data.context` field."
      severity: error
      given: "$.data.context"
      then:
        function: truthy

    required-version:
      description: "API should define a version."
      message: "Missing or empty `data.version` field."
      severity: error
      given: "$.data.version"
      then:
        function: truthy

    https-transport-recommended:
      description: "Recommend using HTTPS transport whenever possible."
      message: "Transport array should include 'https'."
      severity: warn
      given: "$.data.transport"
      then:
        function: schema
        functionOptions:
          schema:
            type: array
            items:
              type: string
            # Basic validation to ensure at least one "https" is present
            not:
              items:
                enum:
                  - http  # This means purely "http" alone not recommended; or you can allow multiple items

    no-plaintext-secret:
      description: "Endpoint security credentials or secrets should not appear in plaintext."
      message: "Avoid storing secrets in plain text in `endpointConfig`."
      severity: error
      given:
        - "$.data.endpointConfig.endpoint_security.production"
        - "$.data.endpointConfig.endpoint_security.sandbox"
      then:
        function: pattern
        field: "clientSecret"
        functionOptions:
          # Very naive pattern check for obvious secrets or placeholders.
          # Adjust as needed.
          match: "^(?!.*(secret|password|admin123|qwerty).*$).*$"

    security-schemes-defined:
      description: "APIs should define at least one strong security scheme."
      message: "Security scheme array (`securityScheme`) is missing or empty."
      severity: warn
      given: "$.data.securityScheme"
      then:
        function: truthy

    no-empty-operation-id:
      description: "Operations must not contain empty IDs."
      message: "Empty operation 'id' found."
      severity: warn
      given: "$.data.operations[*].id"
      then:
        function: truthy

    operation-verb-check:
      description: "Operation verb should be valid HTTP method."
      message: "Invalid HTTP verb: {{value}}. Please use GET/POST/PUT/DELETE/PATCH/OPTIONS, etc."
      severity: error
      given: "$.data.operations[*].verb"
      then:
        function: pattern
        functionOptions:
          match: "^(GET|POST|PUT|DELETE|PATCH|OPTIONS|HEAD)$"

    business-information-owner-email:
      description: "API should specify business owner email."
      message: "Missing or empty businessOwnerEmail field."
      severity: warn
      given: "$.data.businessInformation.businessOwnerEmail"
      then:
        function: truthy

    technical-information-owner-email:
      description: "API should specify technical owner email."
      message: "Missing or empty technicalOwnerEmail field."
      severity: warn
      given: "$.data.businessInformation.technicalOwnerEmail"
      then:
        function: truthy

    cors-best-practices:
      description: "Check if CORS is properly configured (at least reviewed)."
      message: "CORS is fully open (*). Please ensure you are aware of the security implications."
      severity: info
      given: "$.data.corsConfiguration.accessControlAllowOrigins"
      then:
        function: schema
        functionOptions:
          schema:
            type: array
            items:
              type: string
            # This rule only warns if '*' is present.
            # If you want to enforce removing '*', set severity to error and wrap in "not".
            not:
              contains:
                const: "*"